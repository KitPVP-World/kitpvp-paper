From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: NotStevy <notstevy@ultrabuildmc.de>
Date: Fri, 23 Aug 2024 20:45:28 +0200
Subject: [PATCH] Display Player


diff --git a/build.gradle.kts b/build.gradle.kts
index 9491cce00f1a74929dd6f845ee29886036ef0444..dbb7d7c0f782e332f119feec4f87d76071a77624 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -209,7 +209,7 @@ tasks.registerRunTask("runReobfServer") {
 tasks.registerRunTask("runDevServer") {
     description = "Spin up a test server without assembling a jar"
     classpath(sourceSets.main.map { it.runtimeClasspath })
-    jvmArgs("-DPaper.pushPaperAssetsRoot=true")
+    jvmArgs("-DPaper.pushPaperAssetsRoot=true", "-Ddisable.watchdog=true")
 }
 
 tasks.registerRunTask("runBundler") {
diff --git a/src/main/java/net/minecraft/network/syncher/SynchedEntityData.java b/src/main/java/net/minecraft/network/syncher/SynchedEntityData.java
index 0f99733660f91280e4c6262cf75b3c9cae86f65a..681876dd26ca5679c131d34d797fe6d57448f707 100644
--- a/src/main/java/net/minecraft/network/syncher/SynchedEntityData.java
+++ b/src/main/java/net/minecraft/network/syncher/SynchedEntityData.java
@@ -41,6 +41,19 @@ public class SynchedEntityData {
             }
         }
 
+        // kitpvp start
+        if(entityClass == world.kitpvp.paper.entity.DisplayPlayer.class)
+            throw new RuntimeException("Cannot register a synched entity data for a 'Displaynet.minecraft.world.entity.player.Player'! Must be synched with 'net.minecraft.world.entity.player.Player'");
+        if(entityClass == net.minecraft.world.entity.player.Player.class) {
+            var displayPlayerLastId = ID_REGISTRY.getLastIdFor(world.kitpvp.paper.entity.DisplayPlayer.class);
+            var playerLastId = ID_REGISTRY.getLastIdFor(net.minecraft.world.entity.player.Player.class);
+            if(displayPlayerLastId != playerLastId)
+                throw new RuntimeException("'Displaynet.minecraft.world.entity.player.Player' ("+ displayPlayerLastId + ") is not in sync with the 'net.minecraft.world.entity.player.Player' (" + playerLastId + ")");
+
+            ID_REGISTRY.define(world.kitpvp.paper.entity.DisplayPlayer.class);
+        }
+        // kitpvp end
+
         int i = SynchedEntityData.ID_REGISTRY.define(entityClass);
 
         if (i > 254) {
diff --git a/src/main/java/net/minecraft/server/level/ServerEntity.java b/src/main/java/net/minecraft/server/level/ServerEntity.java
index 8ea2f24695f5dad55e21f238b69442513e7a90c6..2505350922f372a88eaa423f9cff3e703a400aba 100644
--- a/src/main/java/net/minecraft/server/level/ServerEntity.java
+++ b/src/main/java/net/minecraft/server/level/ServerEntity.java
@@ -316,6 +316,16 @@ public class ServerEntity {
             // CraftBukkit end
         }
 
+        // kitpvp start - DisplayPlayer
+        if(this.entity instanceof world.kitpvp.paper.entity.DisplayPlayer displayPlayer) {
+            sender.accept(
+                new net.minecraft.network.protocol.game.ClientboundPlayerInfoUpdatePacket(
+                    java.util.EnumSet.of(net.minecraft.network.protocol.game.ClientboundPlayerInfoUpdatePacket.Action.ADD_PLAYER),
+                    displayPlayer.getInfoUpdateEntry(player)
+                )
+            );
+        }
+        // kitpvp end - DisplayPlayer
         Packet<ClientGamePacketListener> packet = this.entity.getAddEntityPacket(this);
 
         sender.accept(packet);
diff --git a/src/main/java/net/minecraft/world/entity/EntityType.java b/src/main/java/net/minecraft/world/entity/EntityType.java
index cb61462d4691a055a4b25f7b953609d8a154fdfe..dfca5259f93d3e77a8f71c103e068c01fbccbb9d 100644
--- a/src/main/java/net/minecraft/world/entity/EntityType.java
+++ b/src/main/java/net/minecraft/world/entity/EntityType.java
@@ -170,6 +170,7 @@ import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
 import org.bukkit.event.entity.CreatureSpawnEvent;
 import org.slf4j.Logger;
+import world.kitpvp.paper.entity.DisplayPlayer;
 
 public class EntityType<T extends Entity> implements FeatureElement, EntityTypeTest<Entity, T> {
 
@@ -306,6 +307,7 @@ public class EntityType<T extends Entity> implements FeatureElement, EntityTypeT
     public static final EntityType<ZombieVillager> ZOMBIE_VILLAGER = EntityType.register("zombie_villager", EntityType.Builder.of(ZombieVillager::new, MobCategory.MONSTER).sized(0.6F, 1.95F).passengerAttachments(2.125F).ridingOffset(-0.7F).eyeHeight(1.74F).clientTrackingRange(8));
     public static final EntityType<ZombifiedPiglin> ZOMBIFIED_PIGLIN = EntityType.register("zombified_piglin", EntityType.Builder.of(ZombifiedPiglin::new, MobCategory.MONSTER).fireImmune().sized(0.6F, 1.95F).eyeHeight(1.79F).passengerAttachments(2.0F).ridingOffset(-0.7F).clientTrackingRange(8));
     public static final EntityType<Player> PLAYER = EntityType.register("player", EntityType.Builder.createNothing(MobCategory.MISC).noSave().noSummon().sized(0.6F, 1.8F).eyeHeight(1.62F).vehicleAttachment(Player.DEFAULT_VEHICLE_ATTACHMENT).clientTrackingRange(32).updateInterval(2));
+    public static final EntityType<DisplayPlayer> DISPLAY_PLAYER = EntityType.register("kitpvp:display_player", EntityType.Builder.of(DisplayPlayer::new, MobCategory.MISC).noSave().sized(0.6F, 1.8F).eyeHeight(1.62F).vehicleAttachment(Player.DEFAULT_VEHICLE_ATTACHMENT).clientTrackingRange(32).updateInterval(2)); // kitpv
     public static final EntityType<FishingHook> FISHING_BOBBER = EntityType.register("fishing_bobber", EntityType.Builder.of(FishingHook::new, MobCategory.MISC).noSave().noSummon().sized(0.25F, 0.25F).clientTrackingRange(4).updateInterval(5));
     private final EntityType.EntityFactory<T> factory;
     private final MobCategory category;
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index 2aa6374cd4a96efd85899be8cd3172a8257bfe6b..0bebbc243aa73242c4d4def3c12e16559cdb15f9 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -198,7 +198,7 @@ public abstract class LivingEntity extends Entity implements Attackable {
     public static final float DEFAULT_BABY_SCALE = 0.5F;
     private static final float ITEM_USE_EFFECT_START_FRACTION = 0.21875F;
     public static final String ATTRIBUTES_FIELD = "attributes";
-    private final AttributeMap attributes;
+    private AttributeMap attributes; // kitpvp - DisplayPlayer - remove final
     public CombatTracker combatTracker = new CombatTracker(this);
     public final Map<Holder<MobEffect>, MobEffectInstance> activeEffects = Maps.newHashMap();
     private final NonNullList<ItemStack> lastHandItemStacks;
@@ -279,7 +279,7 @@ public abstract class LivingEntity extends Entity implements Attackable {
     // CraftBukkit start
     public int expToDrop;
     public ArrayList<DefaultDrop> drops = new ArrayList<>(); // Paper - Restore vanilla drops behavior
-    public final org.bukkit.craftbukkit.attribute.CraftAttributeMap craftAttributes;
+    public org.bukkit.craftbukkit.attribute.CraftAttributeMap craftAttributes; // kitpvp - DisplayPlayer - remove final
     public boolean collides = true;
     public Set<UUID> collidableExemptions = new HashSet<>();
     public boolean bukkitPickUpLoot;
@@ -2661,6 +2661,13 @@ public abstract class LivingEntity extends Entity implements Attackable {
         return this.attributes;
     }
 
+    // kitpvp - DisplayPlayer - modifiable attributes
+    public void setAttributes(AttributeMap attributeMap) {
+        this.attributes = attributeMap;
+        this.craftAttributes = new CraftAttributeMap(this.attributes);
+    }
+    // kitpvp - DisplayPlayer - end
+
     public ItemStack getMainHandItem() {
         return this.getItemBySlot(EquipmentSlot.MAINHAND);
     }
diff --git a/src/main/java/net/minecraft/world/entity/ai/attributes/DefaultAttributes.java b/src/main/java/net/minecraft/world/entity/ai/attributes/DefaultAttributes.java
index 10a1434313b11dae8210484583c6bf3b627416f7..68218f62084abe11b2d1db416e742377e503648e 100644
--- a/src/main/java/net/minecraft/world/entity/ai/attributes/DefaultAttributes.java
+++ b/src/main/java/net/minecraft/world/entity/ai/attributes/DefaultAttributes.java
@@ -82,6 +82,7 @@ import net.minecraft.world.entity.monster.warden.Warden;
 import net.minecraft.world.entity.npc.Villager;
 import net.minecraft.world.entity.player.Player;
 import org.slf4j.Logger;
+import world.kitpvp.paper.entity.DisplayPlayer;
 
 public class DefaultAttributes {
     private static final Logger LOGGER = LogUtils.getLogger();
@@ -135,6 +136,7 @@ public class DefaultAttributes {
         .put(EntityType.PIGLIN_BRUTE, PiglinBrute.createAttributes().build())
         .put(EntityType.PILLAGER, Pillager.createAttributes().build())
         .put(EntityType.PLAYER, Player.createAttributes().build())
+        .put(EntityType.DISPLAY_PLAYER, DisplayPlayer.createAttributes().build()) // kitpvp
         .put(EntityType.POLAR_BEAR, PolarBear.createAttributes().build())
         .put(EntityType.PUFFERFISH, AbstractFish.createAttributes().build())
         .put(EntityType.RABBIT, Rabbit.createAttributes().build())
diff --git a/src/main/java/net/minecraft/world/entity/player/Player.java b/src/main/java/net/minecraft/world/entity/player/Player.java
index 09bcbc0ae36e4e69fee87a7e0c49acf496117a39..95806ecae074e00d2ff74c92586569ba80df37e2 100644
--- a/src/main/java/net/minecraft/world/entity/player/Player.java
+++ b/src/main/java/net/minecraft/world/entity/player/Player.java
@@ -153,7 +153,7 @@ public abstract class Player extends LivingEntity {
     private static final EntityDataAccessor<Float> DATA_PLAYER_ABSORPTION_ID = SynchedEntityData.defineId(Player.class, EntityDataSerializers.FLOAT);
     private static final EntityDataAccessor<Integer> DATA_SCORE_ID = SynchedEntityData.defineId(Player.class, EntityDataSerializers.INT);
     public static final EntityDataAccessor<Byte> DATA_PLAYER_MODE_CUSTOMISATION = SynchedEntityData.defineId(Player.class, EntityDataSerializers.BYTE);
-    protected static final EntityDataAccessor<Byte> DATA_PLAYER_MAIN_HAND = SynchedEntityData.defineId(Player.class, EntityDataSerializers.BYTE);
+    public static final EntityDataAccessor<Byte> DATA_PLAYER_MAIN_HAND = SynchedEntityData.defineId(Player.class, EntityDataSerializers.BYTE); // kitpvp - DisplayPlayer - modify access
     protected static final EntityDataAccessor<CompoundTag> DATA_SHOULDER_LEFT = SynchedEntityData.defineId(Player.class, EntityDataSerializers.COMPOUND_TAG);
     protected static final EntityDataAccessor<CompoundTag> DATA_SHOULDER_RIGHT = SynchedEntityData.defineId(Player.class, EntityDataSerializers.COMPOUND_TAG);
     private long timeEntitySatOnShoulder;
@@ -240,7 +240,7 @@ public abstract class Player extends LivingEntity {
     }
 
     @Override
-    protected void defineSynchedData(SynchedEntityData.Builder builder) {
+    public void defineSynchedData(SynchedEntityData.Builder builder) { // kitpvp - display player - modify access
         super.defineSynchedData(builder);
         builder.define(Player.DATA_PLAYER_ABSORPTION_ID, 0.0F);
         builder.define(Player.DATA_SCORE_ID, 0);
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntityTypes.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntityTypes.java
index afc75ef3fb0fac40673fdfb684bd1f0d0edeb6ce..3b2376254254b001d69f59c894105d4b4cdc09c3 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntityTypes.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntityTypes.java
@@ -10,6 +10,7 @@ import java.util.function.BiFunction;
 import java.util.function.Function;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
+import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.entity.decoration.HangingEntity;
 import net.minecraft.world.entity.decoration.LeashFenceKnotEntity;
 import net.minecraft.world.entity.item.FallingBlockEntity;
@@ -93,6 +94,7 @@ import org.bukkit.entity.Guardian;
 import org.bukkit.entity.Hanging;
 import org.bukkit.entity.Hoglin;
 import org.bukkit.entity.Horse;
+import org.bukkit.entity.HumanEntity;
 import org.bukkit.entity.Husk;
 import org.bukkit.entity.Illusioner;
 import org.bukkit.entity.Interaction;
@@ -175,6 +177,7 @@ import org.bukkit.entity.minecart.SpawnerMinecart;
 import org.bukkit.entity.minecart.StorageMinecart;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.util.Vector;
+import world.kitpvp.paper.entity.DisplayPlayer;
 
 public final class CraftEntityTypes {
 
@@ -424,6 +427,8 @@ public final class CraftEntityTypes {
         register(new EntityTypeData<>(EntityType.HOPPER_MINECART, HopperMinecart.class, CraftMinecartHopper::new, spawnData -> new MinecartHopper(spawnData.minecraftWorld(), spawnData.x(), spawnData.y(), spawnData.z())));
         register(new EntityTypeData<>(EntityType.SPAWNER_MINECART, SpawnerMinecart.class, CraftMinecartMobSpawner::new, spawnData -> new MinecartSpawner(spawnData.minecraftWorld(), spawnData.x(), spawnData.y(), spawnData.z())));
 
+        register(new EntityTypeData<>(EntityType.DISPLAY_PLAYER, world.kitpvp.paper.api.entity.DisplayPlayer.class, (server, displayPlayer) -> displayPlayer.getDefaultServerPlayer().getBukkitEntity(), spawnData -> new DisplayPlayer((ServerLevel) spawnData.minecraftWorld(), spawnData.x(), spawnData.y(), spawnData.z()))); // kitpvp - DisplayPlayer
+
         // None spawn able
         register(new EntityTypeData<>(EntityType.FISHING_BOBBER, FishHook.class, CraftFishHook::new, null)); // Cannot spawn a fish hook
         register(new EntityTypeData<>(EntityType.PLAYER, Player.class, CraftPlayer::new, null)); // Cannot spawn a player
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 42d7660efe5baa6f796f2a7606686c765b6f2478..9a6e88d60a82af4697cf27e11e1f614f923b0a57 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -2312,6 +2312,11 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public ServerPlayer getHandle() {
+        // kitpvp - Display player
+        if(this.entity instanceof world.kitpvp.paper.entity.DisplayPlayer displayPlayer) {
+            return displayPlayer.getDefaultServerPlayer();
+        }
+        // kitpvp - Display player end
         return (ServerPlayer) this.entity;
     }
 
diff --git a/src/main/java/world/kitpvp/paper/entity/DisplayPlayer.java b/src/main/java/world/kitpvp/paper/entity/DisplayPlayer.java
new file mode 100644
index 0000000000000000000000000000000000000000..4bd1a6041de756cd56520ad1263b8892406133b5
--- /dev/null
+++ b/src/main/java/world/kitpvp/paper/entity/DisplayPlayer.java
@@ -0,0 +1,290 @@
+package world.kitpvp.paper.entity;
+
+
+import com.mojang.authlib.GameProfile;
+import com.mojang.serialization.DataResult;
+import net.minecraft.core.GlobalPos;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.NbtOps;
+import net.minecraft.nbt.Tag;
+import net.minecraft.network.Connection;
+import net.minecraft.network.chat.Component;
+import net.minecraft.network.chat.HoverEvent;
+import net.minecraft.network.protocol.Packet;
+import net.minecraft.network.protocol.PacketFlow;
+import net.minecraft.network.protocol.game.ClientGamePacketListener;
+import net.minecraft.network.protocol.game.ClientboundAddEntityPacket;
+import net.minecraft.network.protocol.game.ClientboundPlayerInfoUpdatePacket;
+import net.minecraft.network.syncher.SynchedEntityData;
+import net.minecraft.server.level.ClientInformation;
+import net.minecraft.server.level.ServerEntity;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.server.network.CommonListenerCookie;
+import net.minecraft.server.network.ServerGamePacketListenerImpl;
+import net.minecraft.sounds.SoundEvent;
+import net.minecraft.sounds.SoundEvents;
+import net.minecraft.sounds.SoundSource;
+import net.minecraft.world.Difficulty;
+import net.minecraft.world.damagesource.DamageSource;
+import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.EquipmentSlot;
+import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.entity.Mob;
+import net.minecraft.world.entity.PathfinderMob;
+import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
+import net.minecraft.world.entity.ai.attributes.Attributes;
+import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.level.GameType;
+import net.minecraft.world.level.Level;
+import org.jetbrains.annotations.NotNull;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.util.Objects;
+
+public class DisplayPlayer extends PathfinderMob {
+    private static final Logger LOGGER = LoggerFactory.getLogger(DisplayPlayer.class);
+    private static final EquipmentSlot[] EQUIPMENT_SLOTS = EquipmentSlot.values();
+    private ServerPlayer defaultServerPlayer;
+
+    private boolean aiDisabled;
+    private boolean aggressive;
+    private String name = "Bot";
+
+    public DisplayPlayer(EntityType<DisplayPlayer> type, ServerLevel serverLevel) {
+        super(type, serverLevel);
+        this.setPersistenceRequired();
+        this.setCanPickUpLoot(true);
+
+        var defaultServerPlayer = getDefaultServerPlayer();
+        defaultServerPlayer.setPos(this.position());
+        defaultServerPlayer.xo = this.xo;
+        defaultServerPlayer.yo = this.yo;
+        defaultServerPlayer.zo = this.zo;
+        defaultServerPlayer.connection = new ServerGamePacketListenerImpl(this.serverLevel().getServer(), new Connection(PacketFlow.SERVERBOUND), defaultServerPlayer, new CommonListenerCookie(defaultServerPlayer.getGameProfile(), 0, ClientInformation.createDefault(), true));
+        defaultServerPlayer.setAttributes(getAttributes());
+        this.entityData.set(Player.DATA_PLAYER_MODE_CUSTOMISATION, (byte) 127);
+    }
+
+    public DisplayPlayer(ServerLevel level, double x, double y, double z) {
+        this(EntityType.DISPLAY_PLAYER, level);
+        this.setPos(x, y, z);
+        this.xo = x;
+        this.yo = y;
+        this.zo = z;
+    }
+
+    public @NotNull ClientboundPlayerInfoUpdatePacket.Entry getInfoUpdateEntry(@NotNull ServerPlayer forPlayer) {
+        var gameProfile = new GameProfile(
+            this.getUUID(),
+            this.name
+        );
+        gameProfile.getProperties().putAll(forPlayer.getGameProfile().getProperties());
+
+        return new ClientboundPlayerInfoUpdatePacket.Entry(
+            gameProfile.getId(),
+            gameProfile,
+            true,
+            0,
+            GameType.SURVIVAL,
+            forPlayer.getDisplayName(),
+            null
+        );
+    }
+
+    @Override
+    public @NotNull Packet<ClientGamePacketListener> getAddEntityPacket(ServerEntity entityTrackerEntry) {
+        return new ClientboundAddEntityPacket( // Cloned from other constructor
+            this.getId(),
+            this.getUUID(),
+            this.trackingPosition().x(),
+            this.trackingPosition().y(),
+            this.trackingPosition().z(),
+            entityTrackerEntry.getLastSentXRot(),
+            entityTrackerEntry.getLastSentYRot(),
+            EntityType.PLAYER, // only parameter changed
+            0,
+            entityTrackerEntry.getLastSentMovement(),
+            entityTrackerEntry.getLastSentYHeadRot()
+        );
+    }
+
+    public DisplayPlayer(EntityType<DisplayPlayer> entityType, Level level) {
+        this(entityType, (ServerLevel) level);
+    }
+
+
+    @Override
+    protected void defineSynchedData(SynchedEntityData.@NotNull Builder builder) {
+        this.getDefaultServerPlayer().defineSynchedData(builder);
+    }
+
+    public ServerPlayer getDefaultServerPlayer() {
+        if (this.defaultServerPlayer == null) {
+            this.defaultServerPlayer = new DisplayServerPlayer(this);
+        }
+
+        return this.defaultServerPlayer;
+    }
+
+    public ServerLevel serverLevel() {
+        return (ServerLevel) this.level();
+    }
+
+    public static AttributeSupplier.Builder createAttributes() {
+        return Mob.createMobAttributes().add(Attributes.ATTACK_DAMAGE, 1.0D).add(Attributes.MOVEMENT_SPEED, 0.10000000149011612D).add(Attributes.ATTACK_SPEED).add(Attributes.LUCK).add(Attributes.BLOCK_INTERACTION_RANGE, 4.5D).add(Attributes.ENTITY_INTERACTION_RANGE, 3.0D).add(Attributes.BLOCK_BREAK_SPEED).add(Attributes.SUBMERGED_MINING_SPEED).add(Attributes.SNEAKING_SPEED).add(Attributes.MINING_EFFICIENCY).add(Attributes.SWEEPING_DAMAGE_RATIO);
+    }
+
+    @Override
+    public void tick() {
+        this.noPhysics = this.isSpectator();
+        if (this.isSpectator()) {
+            this.setOnGround(false);
+        }
+
+        super.tick();
+        var defaultServerPlayer = getDefaultServerPlayer();
+        for (var slot : EQUIPMENT_SLOTS)
+            defaultServerPlayer.setItemSlot(slot, this.getItemBySlot(slot));
+        defaultServerPlayer.setPos(this.trackingPosition());
+        this.setHealth(defaultServerPlayer.getHealth());
+        defaultServerPlayer.tick();
+        this.setPose(defaultServerPlayer.getPose());
+    }
+
+
+    @Override
+    public void readAdditionalSaveData(@NotNull CompoundTag nbt) {
+        super.readAdditionalSaveData(nbt);
+        if (nbt.contains("playerName")) {
+            this.name = nbt.getString("playerName");
+        }
+        var defaultPlayer = this.getDefaultServerPlayer();
+
+        // cloned and modified from Player
+        defaultPlayer.getFoodData().readAdditionalSaveData(nbt);
+        defaultPlayer.getAbilities().loadSaveData(nbt);
+        if (nbt.contains("LastDeathLocation", 10)) {
+            DataResult<GlobalPos> dataresult = GlobalPos.CODEC.parse(NbtOps.INSTANCE, nbt.get("LastDeathLocation"));
+
+            Objects.requireNonNull(LOGGER);
+            defaultPlayer.setLastDeathLocation(dataresult.resultOrPartial(LOGGER::error));
+        }
+//        this.setCustomName(Component.literal(this.name));
+    }
+
+
+    @Override
+    public void addAdditionalSaveData(CompoundTag nbt) {
+        super.addAdditionalSaveData(nbt);
+        var defaultPlayer = this.getDefaultServerPlayer();
+
+        // cloned and modified from Player
+        defaultPlayer.getFoodData().addAdditionalSaveData(nbt);
+        defaultPlayer.getAbilities().addSaveData(nbt);
+        defaultPlayer.getLastDeathLocation().flatMap((globalpos) -> {
+            DataResult<Tag> dataresult = GlobalPos.CODEC.encodeStart(NbtOps.INSTANCE, globalpos);
+
+            Objects.requireNonNull(LOGGER);
+            return dataresult.resultOrPartial(LOGGER::error);
+        }).ifPresent((nbtbase) -> {
+            nbt.put("LastDeathLocation", nbtbase);
+        });
+    }
+
+    @Override
+    public boolean hurt(DamageSource source, float amount) {
+        if (super.hurt(source, amount)) {
+            if (source.getEntity() != null && this.level().getLevelData().getDifficulty() == Difficulty.PEACEFUL)
+                source.getEntity().sendSystemMessage(Component.literal("Help me! I am dumb, since the server is on difficulty peaceful!").withColor(0xFFFFFF));
+
+            return this.getDefaultServerPlayer().hurt(source, amount);
+        } else
+            return false;
+    }
+
+    @Override
+    public boolean shouldDropExperience() {
+        return false;
+    }
+
+    @Override
+    protected boolean shouldDropLoot() {
+        return false;
+    }
+
+    @Override
+    protected @NotNull HoverEvent createHoverEvent() {
+        return new HoverEvent(HoverEvent.Action.SHOW_ENTITY, new HoverEvent.EntityTooltipInfo(EntityType.PLAYER, this.getUUID(), this.getName()));
+    }
+
+    @Override
+    protected SoundEvent getHurtSound(DamageSource source) {
+        return source.type().effects().sound();
+    }
+
+    @Override
+    public SoundEvent getDeathSound() {
+        return SoundEvents.PLAYER_DEATH;
+    }
+
+    protected SoundEvent getSwimSound() {
+        return SoundEvents.PLAYER_SWIM;
+    }
+
+    @Override
+    protected SoundEvent getSwimSplashSound() {
+        return SoundEvents.PLAYER_SPLASH;
+    }
+
+    @Override
+    protected SoundEvent getSwimHighSpeedSplashSound() {
+        return SoundEvents.PLAYER_SPLASH_HIGH_SPEED;
+    }
+
+    @Override
+    public SoundSource getSoundSource() {
+        return SoundSource.PLAYERS;
+    }
+
+    @Override
+    public LivingEntity.Fallsounds getFallSounds() {
+        return new LivingEntity.Fallsounds(SoundEvents.PLAYER_SMALL_FALL, SoundEvents.PLAYER_BIG_FALL);
+    }
+
+
+    /*
+    Replacing the synched entity data with local variables (players get kicked if one sent them as synched ones)
+     */
+
+    @Override
+    public void setNoAi(boolean aiDisabled) {
+        this.aiDisabled = aiDisabled;
+    }
+
+    @Override
+    public void setLeftHanded(boolean leftHanded) {
+        this.entityData.set(Player.DATA_PLAYER_MAIN_HAND, (byte) (leftHanded ? 0 : 1));
+    }
+
+    @Override
+    public boolean isLeftHanded() {
+        return this.entityData.get(Player.DATA_PLAYER_MAIN_HAND) == 0;
+    }
+
+    @Override
+    public void setAggressive(boolean attacking) {
+        this.aggressive = attacking;
+    }
+
+    @Override
+    public boolean isNoAi() {
+        return this.aiDisabled;
+    }
+
+    @Override
+    public boolean isAggressive() {
+        return this.aggressive;
+    }
+}
diff --git a/src/main/java/world/kitpvp/paper/entity/DisplayServerPlayer.java b/src/main/java/world/kitpvp/paper/entity/DisplayServerPlayer.java
new file mode 100644
index 0000000000000000000000000000000000000000..cb8f4b309aee388286d368a4a1bb1bb2347a7873
--- /dev/null
+++ b/src/main/java/world/kitpvp/paper/entity/DisplayServerPlayer.java
@@ -0,0 +1,20 @@
+package world.kitpvp.paper.entity;
+
+import com.mojang.authlib.GameProfile;
+import net.minecraft.server.level.ClientInformation;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ServerPlayer;
+
+public final class DisplayServerPlayer extends ServerPlayer {
+    private final DisplayPlayer displayPlayer;
+
+    DisplayServerPlayer(DisplayPlayer displayPlayer) {
+        super(((ServerLevel) displayPlayer.level()).getServer(), (ServerLevel) displayPlayer.level(), new GameProfile(displayPlayer.getUUID(), "defaultbot"), ClientInformation.createDefault());
+        this.setId(displayPlayer.getId());
+        this.displayPlayer = displayPlayer;
+    }
+
+    public DisplayPlayer getDisplayPlayer() {
+        return displayPlayer;
+    }
+}
diff --git a/src/test/java/org/bukkit/entity/EntityTypesTest.java b/src/test/java/org/bukkit/entity/EntityTypesTest.java
index 952924abae79cc504342bbdb6f6953ab8a6cc295..8ac25b8b2b620e61c6b60610db80024b5523ecba 100644
--- a/src/test/java/org/bukkit/entity/EntityTypesTest.java
+++ b/src/test/java/org/bukkit/entity/EntityTypesTest.java
@@ -18,7 +18,8 @@ public class EntityTypesTest extends AbstractTestingBase {
         for (net.minecraft.world.entity.EntityType<?> nms : BuiltInRegistries.ENTITY_TYPE) { // Paper - remap fix
             ResourceLocation key = net.minecraft.world.entity.EntityType.getKey(nms); // Paper - remap fix
 
-            org.bukkit.entity.EntityType bukkit = org.bukkit.entity.EntityType.fromName(key.getPath());
+            String name = key.getNamespace().equals("minecraft") ? key.getPath() : key.toString(); // kitpvp - Display Player (allow factor in namespaces apart from minecraft)
+            org.bukkit.entity.EntityType bukkit = org.bukkit.entity.EntityType.fromName(name);
             assertNotNull(bukkit, "Missing nms->bukkit " + key);
 
             assertTrue(allBukkit.remove(bukkit), "Duplicate entity nms->" + bukkit);
