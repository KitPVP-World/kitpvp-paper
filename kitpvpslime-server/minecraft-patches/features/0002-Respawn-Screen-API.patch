From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: notstevy <notstevy@ultrabuildmc.de>
Date: Thu, 17 Apr 2025 12:22:11 +0200
Subject: [PATCH] Respawn Screen API


diff --git a/net/minecraft/server/level/ServerPlayer.java b/net/minecraft/server/level/ServerPlayer.java
index 3de65c4025be91d938a350c884975cb6edc234d3..491b1863431ecd80f521c19bd81f462b07dd6e9c 100644
--- a/net/minecraft/server/level/ServerPlayer.java
+++ b/net/minecraft/server/level/ServerPlayer.java
@@ -1114,22 +1114,27 @@ public class ServerPlayer extends Player implements ca.spottedleaf.moonrise.patc
         if (apiDeathMessage != null && apiDeathMessage != net.kyori.adventure.text.Component.empty() && showDeathMessage) { // Paper - Adventure // TODO: allow plugins to override?
             Component deathMessage = io.papermc.paper.adventure.PaperAdventure.asVanilla(apiDeathMessage); // Paper - Adventure
 
-            this.connection
-                .send(
-                    new ClientboundPlayerCombatKillPacket(this.getId(), deathMessage),
-                    PacketSendListener.exceptionallySend(
-                        () -> {
-                            int i = 256;
-                            String string = deathMessage.getString(256);
-                            Component component = Component.translatable(
-                                "death.attack.message_too_long", Component.literal(string).withStyle(ChatFormatting.YELLOW)
-                            );
-                            Component component1 = Component.translatable("death.attack.even_more_magic", this.getDisplayName())
-                                .withStyle(style -> style.withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, component)));
-                            return new ClientboundPlayerCombatKillPacket(this.getId(), component1);
-                        }
-                    )
-                );
+            // kitpvp start - Respawn Screen API
+            if(!event.shouldCancelRespawnScreen()) {
+                this.connection
+                    .send(
+                        new ClientboundPlayerCombatKillPacket(this.getId(), deathMessage),
+                        PacketSendListener.exceptionallySend(
+                            () -> {
+                                int i = 256;
+                                String string = deathMessage.getString(256);
+                                Component component = Component.translatable(
+                                    "death.attack.message_too_long", Component.literal(string).withStyle(ChatFormatting.YELLOW)
+                                );
+                                Component component1 = Component.translatable("death.attack.even_more_magic", this.getDisplayName())
+                                    .withStyle(style -> style.withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, component)));
+                                return new ClientboundPlayerCombatKillPacket(this.getId(), component1);
+                            }
+                        )
+                    );
+            }
+            // kitpvp end - Respawn Screen API
+
             Team team = this.getTeam();
             if (team == null || team.getDeathMessageVisibility() == Team.Visibility.ALWAYS) {
                 this.server.getPlayerList().broadcastSystemMessage(deathMessage, false);
@@ -1139,7 +1144,11 @@ public class ServerPlayer extends Player implements ca.spottedleaf.moonrise.patc
                 this.server.getPlayerList().broadcastSystemToAllExceptTeam(this, deathMessage);
             }
         } else {
-            this.connection.send(new ClientboundPlayerCombatKillPacket(this.getId(), CommonComponents.EMPTY));
+            // kitpvp start - Respawn Screen API
+            if(!event.shouldCancelRespawnScreen()) {
+                this.connection.send(new ClientboundPlayerCombatKillPacket(this.getId(), CommonComponents.EMPTY));
+            }
+            // kitpvp end - Respawn Screen API
         }
 
         this.removeEntitiesOnShoulder();
@@ -1179,7 +1188,49 @@ public class ServerPlayer extends Player implements ca.spottedleaf.moonrise.patc
         this.setSharedFlagOnFire(false);
         this.getCombatTracker().recheckStatus();
         this.setLastDeathLocation(Optional.of(GlobalPos.of(this.level().dimension(), this.blockPosition())));
-        this.setClientLoaded(false);
+        // kitpvp start - Respawn Screen API
+        if(!event.shouldCancelRespawnScreen()) {
+            this.setClientLoaded(false);
+            return;
+        }
+        this.reset();
+        TeleportTransition teleportTransition = this.findRespawnPositionAndUseSpawnBlock(!keepInventory, TeleportTransition.DO_NOTHING, PlayerRespawnEvent.RespawnReason.DEATH);
+        if(teleportTransition.newLevel() != this.level() || teleportTransition.missingRespawnBlock()) {
+            this.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.NO_RESPAWN_BLOCK_AVAILABLE, 0.0F));
+            this.setRespawnPosition(null, null, 0f, false, false, com.destroystokyo.paper.event.player.PlayerSetSpawnEvent.Cause.PLAYER_RESPAWN); // CraftBukkit - SPIGOT-5988: Clear respawn location when obstructed // Paper - PlayerSetSpawnEvent
+        }
+
+        this.connection.teleport(org.bukkit.craftbukkit.util.CraftLocation.toBukkit(teleportTransition.position(), teleportTransition.newLevel().getWorld(), teleportTransition.yRot(), teleportTransition.xRot()));
+        org.bukkit.Location location = org.bukkit.craftbukkit.util.CraftLocation.toBukkit(teleportTransition.position(), teleportTransition.newLevel().getWorld(), teleportTransition.yRot(), teleportTransition.xRot());
+
+        boolean isBedSpawn = false;
+        BlockPos respawnPosition = this.getRespawnPosition();
+        ServerLevel level1 = this.server.getLevel(this.getRespawnDimension());
+        if (!keepInventory && respawnPosition != null && level1 != null) {
+            BlockState blockState = level1.getBlockState(respawnPosition);
+            if (blockState.is(net.minecraft.world.level.block.Blocks.RESPAWN_ANCHOR)) {
+                this.connection
+                    .send(
+                        new ClientboundSoundPacket(
+                            net.minecraft.sounds.SoundEvents.RESPAWN_ANCHOR_DEPLETE,
+                            SoundSource.BLOCKS,
+                            respawnPosition.getX(),
+                            respawnPosition.getY(),
+                            respawnPosition.getZ(),
+                            1.0F,
+                            1.0F,
+                            this.level().getRandom().nextLong()
+                        )
+                    );
+            }
+            // Paper start - Add PlayerPostRespawnEvent
+            if (blockState.is(net.minecraft.tags.BlockTags.BEDS) && !teleportTransition.missingRespawnBlock()) {
+                isBedSpawn = true;
+            }
+            // Paper end - Add PlayerPostRespawnEvent
+        }
+        this.level().getCraftServer().getPluginManager().callEvent(new com.destroystokyo.paper.event.player.PlayerPostRespawnEvent(this.getBukkitEntity(), location, isBedSpawn));
+        // kitpvp end - Respawn Screen API
     }
 
     private void tellNeutralMobsThatIDied() {
