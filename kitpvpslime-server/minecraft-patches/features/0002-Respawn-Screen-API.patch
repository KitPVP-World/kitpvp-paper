From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: notstevy <notstevy@ultrabuildmc.de>
Date: Thu, 17 Apr 2025 12:22:11 +0200
Subject: [PATCH] Respawn Screen API


diff --git a/net/minecraft/server/level/ServerPlayer.java b/net/minecraft/server/level/ServerPlayer.java
index f266bf71bbca2ac0e7297eea93d850331705bb78..fd83f0c2715b019e599e3b53707e3421dc4a193f 100644
--- a/net/minecraft/server/level/ServerPlayer.java
+++ b/net/minecraft/server/level/ServerPlayer.java
@@ -1077,7 +1077,8 @@ public class ServerPlayer extends Player implements ca.spottedleaf.moonrise.patc
             Component deathMessage = io.papermc.paper.adventure.PaperAdventure.asVanilla(apiDeathMessage); // Paper - Adventure
 
             // Paper - moved up to sendClientboundPlayerCombatKillPacket()
-            sendClientboundPlayerCombatKillPacket(event.getShowDeathMessages(), deathScreenMessage); // Paper - Expand PlayerDeathEvent
+            if(!event.shouldCancelRespawnScreen()) // kitpvp start - Respawn Screen API
+                sendClientboundPlayerCombatKillPacket(event.getShowDeathMessages(), deathScreenMessage); // Paper - Expand PlayerDeathEvent
             Team team = this.getTeam();
             if (team == null || team.getDeathMessageVisibility() == Team.Visibility.ALWAYS) {
                 this.server.getPlayerList().broadcastSystemMessage(deathMessage, false);
@@ -1086,7 +1087,7 @@ public class ServerPlayer extends Player implements ca.spottedleaf.moonrise.patc
             } else if (team.getDeathMessageVisibility() == Team.Visibility.HIDE_FOR_OWN_TEAM) {
                 this.server.getPlayerList().broadcastSystemToAllExceptTeam(this, deathMessage);
             }
-        } else {
+        } else if(!event.shouldCancelRespawnScreen()) { // kitpvp start - Respawn Screen API
             sendClientboundPlayerCombatKillPacket(event.getShowDeathMessages(), deathScreenMessage); // Paper - Expand PlayerDeathEvent
         }
 
@@ -1140,7 +1141,79 @@ public class ServerPlayer extends Player implements ca.spottedleaf.moonrise.patc
         this.setSharedFlagOnFire(false);
         this.getCombatTracker().recheckStatus();
         this.setLastDeathLocation(Optional.of(GlobalPos.of(this.level().dimension(), this.blockPosition())));
-        this.setClientLoaded(false);
+        // kitpvp start - Respawn Screen API
+        if(!event.shouldCancelRespawnScreen()) {
+            this.setClientLoaded(false);
+            return;
+        }
+        this.stopRiding(); // CraftBukkit
+        this.reset();
+        boolean isBedSpawn = false;
+        boolean isAnchorSpawn = false;
+        TeleportTransition teleportTransition;
+        teleportTransition = this.findRespawnPositionAndUseSpawnBlock(!keepInventory, TeleportTransition.DO_NOTHING, org.bukkit.event.player.PlayerRespawnEvent.RespawnReason.DEATH);
+        org.bukkit.Location location;
+        location = org.bukkit.craftbukkit.util.CraftLocation.toBukkit(teleportTransition.position(), teleportTransition.newLevel().getWorld(), teleportTransition.yRot(), teleportTransition.xRot());
+        Vec3 vec3 = teleportTransition.position();
+        this.forceSetPositionRotation(vec3.x, vec3.y, vec3.z, teleportTransition.yRot(), teleportTransition.xRot());
+        this.level().getChunkSource().addTicketWithRadius(net.minecraft.server.level.TicketType.POST_TELEPORT, new net.minecraft.world.level.ChunkPos(net.minecraft.util.Mth.floor(vec3.x()) >> 4, net.minecraft.util.Mth.floor(vec3.z()) >> 4), 1); // Paper - post teleport ticket type
+        // CraftBukkit end
+        if (teleportTransition.missingRespawnBlock()) {
+            this.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.NO_RESPAWN_BLOCK_AVAILABLE, 0.0F));
+            this.setRespawnPosition(null, false, com.destroystokyo.paper.event.player.PlayerSetSpawnEvent.Cause.PLAYER_RESPAWN); // CraftBukkit - SPIGOT-5988: Clear respawn location when obstructed // Paper - PlayerSetSpawnEvent
+        }
+        ServerPlayer.RespawnConfig respawnConfig = this.getRespawnConfig();
+        if (!keepInventory && respawnConfig != null) {
+            ServerLevel level1 = this.server.getLevel(respawnConfig.dimension());
+            if (level1 != null) {
+                BlockPos blockPos = respawnConfig.pos();
+                BlockState blockState = level1.getBlockState(blockPos);
+                if (blockState.is(net.minecraft.world.level.block.Blocks.RESPAWN_ANCHOR)) {
+                    this.connection
+                        .send(
+                            new ClientboundSoundPacket(
+                                net.minecraft.sounds.SoundEvents.RESPAWN_ANCHOR_DEPLETE,
+                                SoundSource.BLOCKS,
+                                blockPos.getX(),
+                                blockPos.getY(),
+                                blockPos.getZ(),
+                                1.0F,
+                                1.0F,
+                                this.level().getRandom().nextLong()
+                            )
+                        );
+                }
+                // Paper start - Add PlayerPostRespawnEvent
+                if (!teleportTransition.missingRespawnBlock()) {
+                    if (blockState.is(net.minecraft.tags.BlockTags.BEDS)) {
+                        isBedSpawn = true;
+                    } else if (blockState.is(net.minecraft.world.level.block.Blocks.RESPAWN_ANCHOR)) {
+                        isAnchorSpawn = true;
+                    }
+                }
+                // Paper end - Add PlayerPostRespawnEvent
+            }
+        }
+
+        PlayerList playerList = this.server.getPlayerList();
+        // Added from changeDimension
+        playerList.sendAllPlayerInfo(this); // Update health, etc...
+        this.onUpdateAbilities();
+        for (MobEffectInstance mobEffect : this.getActiveEffects()) {
+            this.connection.send(new ClientboundUpdateMobEffectPacket(this.getId(), mobEffect, false)); // blend = false
+        }
+
+        // Fire advancement trigger
+        this.triggerDimensionChangeTriggers(this.level());
+        new com.destroystokyo.paper.event.player.PlayerPostRespawnEvent(
+            this.getBukkitEntity(),
+            location,
+            isBedSpawn,
+            isAnchorSpawn,
+            teleportTransition.missingRespawnBlock(),
+            org.bukkit.event.player.PlayerRespawnEvent.RespawnReason.DEATH
+        ).callEvent();
+        // kitpvp end - Respawn Screen API
     }
 
     private void tellNeutralMobsThatIDied() {
